<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jenkins初识Pipeline之声明式-项目构建</title>
    <link href="/2024/09/30/Jenkins%E5%88%9D%E8%AF%86Pipeline%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <url>/2024/09/30/Jenkins%E5%88%9D%E8%AF%86Pipeline%E4%B9%8B%E5%A3%B0%E6%98%8E%E5%BC%8F-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>Jenkins是Devops技术栈的核心之一。CI&#x2F;CD离不开编写Pipeline脚本。 Pipeline分为 声明式、脚本式。 </p><p><strong>二者的选择</strong></p><blockquote><p>Jenkins是使用Java实现的，所以在很早的时候就引入了groovy作为DSL，管理员可以使用groovy来实现一些自动化和高级的管理功能。因为groovy引擎已经集成到Jenkins，所以在pipeline一开始很自然就使用groovy来编写Jenkinsfile。但是groovy毕竟是一种语言，对于没有太多编程经验的小白学习成本有些高，这个时候声明式的pipeline就出现了，主要是为了降低入门的难度<br>区别如下:</p></blockquote><ul><li>声明式pipeline，官方鼓励声明式编程模型，比较适合没有编程经验的初学者.</li><li>脚本式pipeline，是基于groovy的DSL语言实现的，为Jenkins用户提供了大量的灵活性性和可扩展性，如果脚本中有大量的逻辑处理则推荐使用</li></ul><h2 id="声明式Pipeline-多分支"><a href="#声明式Pipeline-多分支" class="headerlink" title="声明式Pipeline&amp;多分支"></a>声明式Pipeline&amp;多分支</h2><p>构建部署模式是模仿线上环境，故使用多分支。</p><p>本文主要介绍官网主推也较为简单的声明式。 声明式官方文档参考:  <a href="https://www.jenkins.io/zh/doc/book/pipeline/syntax/">https://www.jenkins.io/zh/doc/book/pipeline/syntax/</a><br>学习Jenkins的时候参考的博客,力推讲的非常好:  <a href="https://wiki.eryajf.net/pages/3298.html#_1-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E3%80%82">https://wiki.eryajf.net/pages/3298.html#_1-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E3%80%82</a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先安装插件 **Generic Webhook Trigger **,<strong>Pipeline</strong> 安装后重启Jenkins。</p><h4 id="配置Jenkins发邮件功能。"><a href="#配置Jenkins发邮件功能。" class="headerlink" title="配置Jenkins发邮件功能。"></a>配置Jenkins发邮件功能。</h4><p><code>系统管理-&gt;系统设置-&gt;Jenkins Location</code></p><ul><li>首先配置系统管理员邮箱地址名称<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492772039-e5952e08-c942-45dc-845a-e27484f59e42.png"></li><li>配置发送邮箱验证信息，点击最底下可以测试。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492777290-88f387de-4984-48ef-92c8-db69ae59b172.png"></li></ul><p>可以发送出测试邮箱就配置完毕了。为脚本中发送构建通知做准备。</p><h3 id="配置Jenkins-WebHook功能。"><a href="#配置Jenkins-WebHook功能。" class="headerlink" title="配置Jenkins WebHook功能。"></a>配置Jenkins WebHook功能。</h3><blockquote><p>功能背景: 在Dev环境，开发同学会频繁在本地修改代码并提交到git，提交后就要部署到服务器上。但是每次手工点太过麻烦，而且有的开发同学对Jenkins也没有绝对的权限，运维一般也不会管dev环境。 WebHook功能代码提交后，触发git的webhook调用Jenkins完成构建。</p></blockquote><h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><p><strong>不同Jenkins界面可能存在差异</strong><br><code>系统管理-&gt; 管理用户 -&gt; 点击超级管理员(guopeihua) -&gt; 设置</code> 添加 Api Token<br>把token复制下来，在gitee上会用<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492797168-4ade1625-64ef-4c32-a9d2-c0c087f07135.png"></p><p><code>系统管理-&gt;安全全局配置-&gt;跨站请求伪造保护</code> 不勾选<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492802797-bb7a6423-1910-4453-aae2-6e6ba0a7e212.png"></p><h4 id="配置Gitee"><a href="#配置Gitee" class="headerlink" title="配置Gitee"></a>配置Gitee</h4><p><code>仓库页 -&gt; 管理-&gt;webhook</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492806706-fd0ab339-0a64-4109-8284-bc60aefde4a1.png"></p><p><strong>添加webhook</strong><br><code>http://api-bj.top:8080/jenkins/generic-webhook-trigger/invoke?token=hello-word</code></p><ul><li>Jenkins外网ip地址</li><li>generic-webhook-trigger&#x2F;invoke 固定的webhook触发地址</li><li>?token&#x3D;xxxxxx  <code>token值与jenkins项目中Pipeline的值对应，否则会触发失败。</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492811889-909e9b2b-b47b-445a-8e96-0d02aefddb41.png"></li></ul><h3 id="Jenkins项目配置"><a href="#Jenkins项目配置" class="headerlink" title="Jenkins项目配置"></a>Jenkins项目配置</h3><p>项目主要分为三个文件:</p><ul><li>Dockerfile  # build image 使用</li><li>config.yml  # 定义jenkins构建时使用的变量，使得jenkinsfile更加灵活</li><li>Jenkinsfile # 具体构建部署的逻辑步骤</li></ul><h3 id="Jenkins-Job配置截图如下"><a href="#Jenkins-Job配置截图如下" class="headerlink" title="Jenkins Job配置截图如下:"></a>Jenkins Job配置截图如下:</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492816277-7dce8222-db5a-4f6c-8c01-498d7723e08d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492740951-d1a98f0b-3a36-462a-bbc1-97f5dfcdea07.png"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">FROM adoptopenjdk/openjdk11:alpine-jre<br>ADD target/spring-boot-helloworld-*-SNAPSHOT.jar /applications/spring-boot-helloworld.jar<br>ENTRYPOINT [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;/opt/java/openjdk/bin/java -jar /applications/spring-boot-helloworld.jar --server.port=80&quot;]<br></code></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="config.yml"></a>config.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">GIT_URL: &quot;https://gitee.com/guopeihua/spring-boot-hello-world.git&quot; # git地址<br>DEPLOY_NAME: &quot;hello-deploy&quot; # 控制器名称<br>CONTAINER_NAME: &quot;hello&quot; # 容器名称<br>IMAGE_NAME: &quot;img_hello&quot;  # 镜像前缀<br></code></pre></td></tr></table></figure><h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><p><strong>这里的一些系统级别的变量尽量使用</strong><code>$&#123;env.BRANCH_NAME&#125;</code><strong>方式调用，避免获取不到。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs plain">def project_name=&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;/&quot;)[1]  // 多分支的项目名称<br>def branch_name=&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;/&quot;)[2]  // 多分支的分支名称<br>def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()   // 获取项目 git地址<br><br>pipeline &#123;<br>    // 任意主机运行pipeline<br>    agent any <br><br>    // 编译的工具<br>    tools &#123;<br>        maven &#x27;mvn-3.3.9&#x27;<br>    &#125;<br><br>    // 定义全局变量<br>    environment &#123;<br>        // PIPELINE_CONFIG<br>        // BRANCH_NAME 分支名称<br>        // JOB_BASE_NAME  job名称<br>        // JOB_NAME   job 全称<br>        // WORKSPACE 构建目录<br>        // BUILD_NUMBER 构建次数<br>        // BUILD_URL 构建的url 加上 consoleText 直达文本页面<br>        BUILD_DATE = sh (script: &#x27;date &quot;+%m%d&quot;&#x27;, returnStdout: true).trim()  // 获取今天的时间 月日<br>        IMAGE_TAG = &quot;$&#123;env.BRANCH_NAME&#125;.$&#123;BUILD_DATE&#125;.$&#123;env.BUILD_NUMBER&#125;&quot;  // 镜像tag<br>        OUTPUT_URL_TEXT=&quot;$&#123;env.BUILD_URL&#125;consoleText&quot;                         // 文本url<br>    &#125;<br><br>    triggers &#123;<br>        GenericTrigger (<br>            // 构建时的标题<br>            causeString: &#x27;Triggered by $ref&#x27;,<br>            // 获取POST参数中的变量，key指的是变量名，通过$ref来访问对应的值，value指的是JSON匹配值（参考Jmeter的JSON提取器）<br>            // ref指的是推送的分支，格式如：refs/heads/master<br>            genericVariables: [[key: &#x27;ref&#x27;, value: &#x27;$.ref&#x27;],[key: &#x27;repositoryURL&#x27;, value: &#x27;$.repositoryURL&#x27;], [key: &#x27;branch&#x27;, value: &#x27;$.branch&#x27;]],<br>            // 打印获取的变量的key-value，此处会打印如：ref=refs/heads/master<br>            printContributedVariables: true,<br>            // 打印POST传递的参数<br>            printPostContent: true,<br>            // regexpFilterExpression与regexpFilterExpression成对使用<br>            // 当两者相等时，会触发对应分支的构建<br>            regexpFilterExpression: &#x27;^refs/heads/(master|production)$&#x27;,<br>            regexpFilterText: &#x27;$ref&#x27;,<br>            // 与webhook中配置的token参数值一致<br>            token: &quot;$&#123;project_name&#125;&quot;<br>    )<br>&#125;<br><br>    // 流水线阶段<br>    stages &#123;<br>        stage(&quot;下载代码&quot;)&#123;<br>            steps&#123;<br>                git credentialsId: &#x27;gitee_admin&#x27;, url: &quot;$&#123;scmUrl&#125;&quot;<br>                script &#123;<br>                    config = readYaml file: &#x27;config.yml&#x27;  // 读取config.yml<br>                    IMAGE_WHOLE_NAME =   &quot;$&#123;config.IMAGE_NAME&#125;:$&#123;IMAGE_TAG&#125;&quot;  // 定义完整的镜像名称<br>                &#125;<br>            &#125;   <br>        &#125;<br><br>        stage(&quot;编译&quot;)&#123;<br>            steps&#123;<br>                sh &quot;/usr/local/maven/bin/mvn clean package -Dfile.encoding=UTF-8 -DskipTests=true;&quot;<br>            &#125;<br>        &#125;<br><br>        stage(&quot;构建镜像&quot;)&#123;<br>            steps &#123;<br>                sh &quot;&quot;&quot;<br>                  cd $&#123;WORKSPACE&#125;<br>                  docker build -t $&#123;IMAGE_WHOLE_NAME&#125; .  <br>                &quot;&quot;&quot;<br>            &#125;<br>        &#125;<br><br>        stage(&quot;部署镜像&quot;)&#123;<br>            steps &#123;<br>                sh &quot;&quot;&quot;<br>                  kubectl set image deployment/$&#123;config.DEPLOY_NAME&#125; $&#123;config.CONTAINER_NAME&#125;=$&#123;IMAGE_WHOLE_NAME&#125;<br>                  sleep 5;<br>                &quot;&quot;&quot;<br>            &#125;<br>        &#125;<br><br><br>        stage(&#x27;判断镜像触发&#x27;) &#123;<br>            steps &#123;<br>              script &#123;<br>                  _image = sh(script: &quot;kubectl get deploy $&#123;config.DEPLOY_NAME&#125; -o jsonpath=&#x27;&#123;..image&#125;&#x27;&quot;, returnStdout: true).trim()<br>                  if ( _image == &quot;$&#123;IMAGE_WHOLE_NAME&#125;&quot; ) &#123;<br>                      echo &quot;$&#123;_image&#125; Trigger successfully.&quot;<br>                      // mail bcc: &#x27;&#x27;, body: &quot;$&#123;IMAGE_WHOLE_NAME&#125; image触发成功!&quot;, cc: &#x27;&#x27;, from: &#x27;guopeihua@ele-cloud.com&#x27;, replyTo: &#x27;&#x27;, subject: &#x27;镜像触发成功&#x27;, to: &#x27;17611443879@163.com&#x27;<br>                  &#125;else&#123;<br>                      echo &quot;$&#123;_image&#125; Triggered failed.&quot;<br>                      mail bcc: &#x27;&#x27;, body: &quot;$&#123;IMAGE_WHOLE_NAME&#125; image触发失败 退出构建!&quot;, cc: &#x27;&#x27;, from: &#x27;guopeihua@ele-cloud.com&#x27;, replyTo: &#x27;&#x27;, subject: &#x27;镜像触发失败&#x27;, to: &#x27;17611443879@163.com&#x27;<br>                      sh &#x27;exit 1&#x27;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    post&#123;<br>        always&#123;<br>            // 始终都会执行<br>            script&#123;<br>                println(&#x27;构建结果&#x27;)<br>            &#125;<br>        &#125;<br>        success&#123;<br>            mail bcc: &#x27;&#x27;, body: &quot;job $&#123;env.JOB_NAME&#125;第$&#123;env.BUILD_NUMBER&#125;次构建成功! \n deploy_name: $&#123;config.DEPLOY_NAME&#125; \n URL: $&#123;OUTPUT_URL_TEXT&#125; &quot;, cc: &#x27;&#x27;, from: &#x27;guopeihua@ele-cloud.com&#x27;, replyTo: &#x27;&#x27;, subject: &#x27;[构建成功]&#x27;, to: &#x27;17611443879@163.com&#x27;<br>            script&#123;<br>             println(&#x27;success--构建成功!&#x27;)<br>             echo &quot;项目构建地址为: $&#123;OUTPUT_URL_TEXT&#125;&quot;<br>            &#125;<br>        &#125;<br>        failure&#123;<br>            mail bcc: &#x27;&#x27;, body: &quot;job $&#123;env.JOB_NAME&#125;第$&#123;env.BUILD_NUMBER&#125;次构建失败! \n deploy_name: $&#123;config.DEPLOY_NAME&#125; \n URL: $&#123;OUTPUT_URL_TEXT&#125; &quot;, cc: &#x27;&#x27;, from: &#x27;guopeihua@ele-cloud.com&#x27;, replyTo: &#x27;&#x27;, subject: &#x27;[构建失败]&#x27;, to: &#x27;17611443879@163.com&#x27;<br>            script&#123;<br>             println(&#x27;failure--构建失败!&#x27;)<br>            &#125;<br>        &#125;<br>        aborted&#123;<br>            mail bcc: &#x27;&#x27;, body: &quot;job $&#123;env.JOB_NAME&#125;第$&#123;env.BUILD_NUMBER&#125;次构建终止! \n deploy_name: $&#123;config.DEPLOY_NAME&#125; \n URL: $&#123;OUTPUT_URL_TEXT&#125;&quot;, cc: &#x27;&#x27;, from: &#x27;guopeihua@ele-cloud.com&#x27;, replyTo: &#x27;&#x27;, subject: &#x27;[构建终止]&#x27;, to: &#x27;17611443879@163.com&#x27;<br>            script&#123;<br>             println(&#x27;aborted--构建终止!&#x27;)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构建的结果"><a href="#构建的结果" class="headerlink" title="构建的结果"></a>构建的结果</h3><p>Jenkins页面构建图片<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492827861-2c1359f7-4c4d-436e-b157-53dd1983a0a2.png"><br>触发邮件截图<br><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/791267/1722492831463-e0388fd8-d9af-46b9-a7ea-6046f11d0b13.jpeg"></p><h3 id="Pipeline-补充-公共Jenkinsfile"><a href="#Pipeline-补充-公共Jenkinsfile" class="headerlink" title="Pipeline 补充 公共Jenkinsfile"></a>Pipeline 补充 公共Jenkinsfile</h3><p>整体思路:  Jenkins 修改pipeline读取类型，gitee创一个库专门存放Jenkinsfile逻辑<br>操作如下:</p><h4 id="config-yml-增加配置"><a href="#config-yml-增加配置" class="headerlink" title="config.yml 增加配置"></a>config.yml 增加配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"># Jenkinsfile 存放的公共库路径<br>pipeline_template: docs/jenkins/Jenkinsfile<br>GIT_URL: &quot;https://gitee.com/guopeihua/spring-boot-hello-world.git&quot; # git地址<br>DEPLOY_NAME: &quot;hello-deploy&quot; # 控制器名称<br>CONTAINER_NAME: &quot;hello&quot; # 容器名称<br>IMAGE_NAME: &quot;img_hello&quot;  # 镜像前缀<br></code></pre></td></tr></table></figure><p>Jenkinsfile gitee路径如下:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492839071-e11ce85b-277f-44b0-b9e8-f4b10ce38291.png"></p><h4 id="Jenkins-Job配置"><a href="#Jenkins-Job配置" class="headerlink" title="Jenkins Job配置"></a>Jenkins Job配置</h4><p><strong>其他配置不变</strong><br><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722492843517-d79ce2ae-c7f4-4fc2-aaa0-d959d70b094e.png"></p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins部署</title>
    <link href="/2024/09/30/Jenkins%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/09/30/Jenkins%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="Jenkins部署"><a href="#Jenkins部署" class="headerlink" title="Jenkins部署"></a>Jenkins部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs plain">apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  annotations:<br>    deployment.kubernetes.io/revision: &quot;5&quot;<br>    description: &quot;&quot;<br>  creationTimestamp: &quot;2024-07-04T03:16:31Z&quot;<br>  generation: 14<br>  labels:<br>    appgroup: &quot;&quot;<br>    version: v1<br>  name: jenkins-prod<br>  namespace: jenkins<br>  resourceVersion: &quot;942871743&quot;<br>  uid: cbd5e9cc-ade3-4758-9819-341c54e27e9b<br>spec:<br>  progressDeadlineSeconds: 600<br>  replicas: 1<br>  revisionHistoryLimit: 10<br>  selector:<br>    matchLabels:<br>      app: jenkins-prod<br>      version: v1<br>  strategy:<br>    rollingUpdate:<br>      maxSurge: 25%<br>      maxUnavailable: 25%<br>    type: RollingUpdate<br>  template:<br>    metadata:<br>      creationTimestamp: null<br>      labels:<br>        app: jenkins-prod<br>        version: v1<br>    spec:<br>      containers:<br>      - env:<br>        - name: PAAS_APP_NAME<br>          value: jenkins-prod<br>        - name: PAAS_NAMESPACE<br>          value: jenkins<br>        - name: PAAS_PROJECT_ID<br>          value: 0d3e63479d00f4472f71c010ea9e185c<br>        - name: TZ<br>          value: Asia/Shanghai<br>        image: harbor.devops.kaishustory.com/kubesphere/jenkins:2.459<br>        imagePullPolicy: IfNotPresent<br>        name: jenkins-prod<br>        resources:<br>          limits:<br>            cpu: &quot;4&quot;<br>            memory: 4Gi<br>          requests:<br>            cpu: &quot;1&quot;<br>            memory: 1Gi<br>        terminationMessagePath: /dev/termination-log<br>        terminationMessagePolicy: File<br>        volumeMounts:<br>        - mountPath: /var/jenkins_home<br>          name: vol-172008326291832657<br>      dnsPolicy: ClusterFirst<br>      imagePullSecrets:<br>      - name: default-secret<br>      restartPolicy: Always<br>      schedulerName: default-scheduler<br>      securityContext: &#123;&#125;<br>      terminationGracePeriodSeconds: 30<br>      tolerations:<br>      - effect: NoSchedule<br>        key: jenkins<br>        operator: Exists<br>      volumes:<br>      - hostPath:<br>          path: /mnt/paas/jenkins/data<br>          type: &quot;&quot;<br>        name: vol-172008326291832657<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  creationTimestamp: &quot;2024-07-04T03:16:31Z&quot;<br>  labels:<br>    app: jenkins-prod<br>    version: v1<br>  name: jenkins-prod<br>  namespace: jenkins<br>  resourceVersion: &quot;941708556&quot;<br>  uid: 27936243-c4fb-4afd-ad70-63863fba18b6<br>spec:<br>  clusterIP: 10.245.248.119<br>  clusterIPs:<br>  - 10.245.248.119<br>  internalTrafficPolicy: Cluster<br>  ipFamilies:<br>  - IPv4<br>  ipFamilyPolicy: SingleStack<br>  ports:<br>  - name: cce-service-0<br>    port: 8080<br>    protocol: TCP<br>    targetPort: 8080<br>  - name: cce-service-1<br>    port: 50000<br>    protocol: TCP<br>    targetPort: 50000<br>  selector:<br>    app: jenkins-prod<br>    version: v1<br>  sessionAffinity: None<br>  type: ClusterIP<br></code></pre></td></tr></table></figure><h4 id="Apisix-域名代理"><a href="#Apisix-域名代理" class="headerlink" title="Apisix 域名代理"></a>Apisix 域名代理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">apiVersion: apisix.apache.org/v2<br>kind: ApisixRoute<br>metadata:<br>  name: jenkins.kaishujia.com<br>  namespace: jenkins<br>spec:<br>  http:<br>  - backends:<br>    - serviceName: jenkins-prod<br>      servicePort: 8080<br>    match:<br>      hosts:<br>      - jenkins.kaishujia.com<br>      paths:<br>      - /*<br>    websocket: true<br>    name: jenkins-prod<br></code></pre></td></tr></table></figure><h4 id="阿里云域名解析"><a href="#阿里云域名解析" class="headerlink" title="阿里云域名解析"></a>阿里云域名解析</h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602823017-13920330-63fa-40a7-a138-b8122f076277.png"></p><h4 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h4><p>用户名: admin cat &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword 获取密码 </p><h3 id="配置凭据"><a href="#配置凭据" class="headerlink" title="配置凭据"></a>配置凭据</h3><table><thead><tr><th align="left">用户名</th><th align="left">密码</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td align="left">deploy</td><td align="left">1234567890</td><td>用户密码</td><td>gitlab认证</td></tr><tr><td align="left">harbor</td><td align="left">Kaishu2099&#x3D;</td><td>用户密码</td><td>Docker hub认证</td></tr><tr><td align="left">ks-ops-cmdb</td><td align="left">c2f69d0d229d305f7b357de0ecf9f8ff55f847d5</td><td>用户密码</td><td>cmdb认证</td></tr><tr><td align="left">global-kubernetes-test</td><td align="left"></td><td>Secret file</td><td>test环境k8s config</td></tr><tr><td align="left">global-kubernetes-gamma</td><td align="left"></td><td>Secret file</td><td>gamma环境k8s config</td></tr><tr><td align="left">global-kubernetes-prod</td><td align="left"></td><td>Secret file</td><td>prod环境k8s config</td></tr><tr><td align="left">global-kubernetes-devops</td><td align="left"></td><td>Secret file</td><td>devops环境k8s config</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602822911-d77c6182-9ef4-4636-a787-80714fc7d398.png"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li><strong>Blue Ocean</strong> jenkins更好看的ui</li><li><strong>Git Parameter</strong> 参数化构建获取git分支</li><li><strong>Active Choices</strong> 参数化构建支持调用自定义的groovy脚本</li><li>**Extended Choice Parameter ** 参数化构建支持调用自定义的groovy脚本 功能更强大</li><li><strong>build user vars</strong> 能够获取更多关于构建者相关的信息</li><li><strong>Build Name and Description Setter</strong> 构建历史列表栏 可以自定义显示一些值 </li><li><strong>Rebuilder</strong> 快速获取上次的参数化构建选中的值 </li><li><strong>Pipeline: Stage View</strong> 显示pipeline的每个阶段的视图</li><li><strong>Kubernetes</strong> 连接k8s的插件</li><li><strong>Kubernetes CLI</strong> pipeline中基于配置文件连接k8s的插件</li><li><strong>docker</strong> docker api</li><li><strong>Docker Pipeline</strong> pipeline中调用 docker api</li><li><strong>Locale</strong> jenkins汉化</li><li>**Figlet Buildstep ** 自定义字体</li><li>**HTTP Request ** http调用请求</li><li><strong>Hidden Parameter</strong> 隐藏插件</li><li><strong>Role-based Authorization Strategy</strong> 权限控制管理</li><li>**LDAP ** Jenkins接入LDAP对用户做认证</li><li>Lark Notice Plugin 飞书通知 </li><li>Pipeline Utility Steps 格式化json、yaml的方法</li></ul><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><h6 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h6><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602822938-87cd4e0e-6bf6-4e05-9a70-07dea030d813.png"></p><h6 id="Cloud-devops详细配置"><a href="#Cloud-devops详细配置" class="headerlink" title="Cloud devops详细配置"></a><strong>Cloud devops详细配置</strong></h6><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602822930-8060a82e-cb6d-4f5b-a9c3-aa95301031a9.png"></p><h6 id="pod模板详细配置"><a href="#pod模板详细配置" class="headerlink" title="pod模板详细配置"></a><strong>pod模板详细配置</strong></h6><ul><li>名称和标签列表保持统一, pipeline基于标签调度创建构建的容器</li><li>容器相关配置</li></ul><ol><li>Maven容器 用于编译java代码</li><li>Jnlp容器是jenkins 容器化的slave</li><li>Python容器 连接apisix对deployment的灰度配置</li><li>nfs目录挂载 用于缓存maven的目录 利于maven的编译加速</li><li>Image Pull Secret 用于下载镜像的认证</li><li>Raw YAML for the Pod 规则是将 maven的配置文件只挂载到maven容器中 连接内网nexus</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">spec:<br>  containers:<br>  - name: &quot;maven&quot;<br>    volumeMounts:<br>    - name: config-volume<br>      mountPath: /opt/apache-maven-3.5.3/conf/settings.xml<br>      subPath: settings.xml<br>  volumes:<br>    - name: config-volume<br>      configMap:<br>        name: devops-maven-setting<br>        items:<br>        - key: MavenSetting<br>          path: settings.xml<br>  securityContext:<br>    fsGroup: 1000<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602823025-81ed1c08-71cf-4cde-9307-afe6e5677f3f.png"></p><h5 id="Role-based-Authorization-Strategy"><a href="#Role-based-Authorization-Strategy" class="headerlink" title="**Role-based Authorization Strategy **"></a>**Role-based Authorization Strategy **</h5><p>Dashboard 系统管理 全局安全配置 授权策略设置为插件授权</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602823891-886e7bb2-5ea5-4934-883a-9936f3407fb1.png"></p><h6 id="Global-roles"><a href="#Global-roles" class="headerlink" title="Global roles"></a><strong>Global roles</strong></h6><p>这里新建一个全局角色 为: developer 给读权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824481-7cc63c13-d34c-44be-92d2-fdb8c8f1e673.png"></p><h6 id="Item-roles"><a href="#Item-roles" class="headerlink" title="Item roles"></a><strong>Item roles</strong></h6><p>为每个目录都创建一个角色权限，方便后面关联用户、组的时候 进行分配(只给了 job的查看、构建、取消的权限)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824394-c8276fe9-4d31-45ec-8f93-4e7924c4c52b.png"></p><h6 id="Global-roles-1"><a href="#Global-roles-1" class="headerlink" title="Global roles"></a><strong>Global roles</strong></h6><p>为用户: guopeihua 关联 developer角色 继承这个角色的权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824500-45f992d5-53a3-49c5-8a0a-fbd3791e330a.png"></p><h6 id="Item-roles-1"><a href="#Item-roles-1" class="headerlink" title="**Item roles **"></a>**Item roles **</h6><p>为用户: guopeihua 关联item role 为test-backend 就会拥有role下的job权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824459-03151b7d-bc39-48f4-a277-7729916b6ef4.png"></p><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h6><p>admin视图</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824521-232633b7-ee02-47ef-83f4-cecf3d2162e5.png"></p><p>guopeihua视图</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602824971-f5e2cc86-6174-4693-8917-a7321c8f5375.png"></p><h5 id="LDAP配置"><a href="#LDAP配置" class="headerlink" title="LDAP配置"></a>LDAP配置</h5><ul><li>root DN ldap的跟查询路径</li><li>User search base 基础的人员查询路径</li><li>User search filter 人员查询规则 按照指定字段</li><li>Manager DN 超级管理员信息</li><li>Manager Password 超级管理员密码</li><li>Display Name LDAP attribute jenkins右上角显示的名称 displayname在ldap中 是用户的中文名称</li><li>Email Address LDAP attribute 用户的邮箱</li></ul><p><strong>LDAP详细配置截图</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602825070-e57d4902-58cf-4755-be15-2c8bec80202a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602825049-552e9951-7f90-45ba-96ce-17285b67849f.png"></p><p><strong>验证</strong></p><p>用户名密码验证通过后 会返回该用户在ldap中的所在组</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602825100-0f6b5497-99de-4f92-9d5e-7dd602856186.png"></p><h5 id="Lark-Notice-Plugin-飞书通知"><a href="#Lark-Notice-Plugin-飞书通知" class="headerlink" title="Lark Notice Plugin 飞书通知"></a>Lark Notice Plugin 飞书通知</h5><p><strong>参考文档</strong>: <a href="https://721806280.github.io/lark-notice-plugin-doc/guide/feature/lark/pipeline.html">https://721806280.github.io/lark-notice-plugin-doc/guide/feature/lark/pipeline.html</a></p><p>安装完后 系统管理 有一个飞书的模块 在里面可以新增机器人 基于飞书函数发送消息 <font style="color:rgb(216,57,49);">以下为代码示例</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(&#x27;text&#x27;)&#123;<br>            steps &#123;<br>                echo &#x27;发送文本消息...&#x27;<br>            &#125;<br>            post &#123;<br>                success &#123;<br>                    lark (<br>                        robot: &#x27;f72aa1bb-0f0b-47c7-8387-272d266dc25c&#x27;,<br>                        type: &#x27;TEXT&#x27;,<br>                        text: [<br>                            &quot;新更新提醒&quot;,<br>                            &#x27;&lt;at user_id=&quot;all&quot;&gt;所有人&lt;/at&gt;&#x27;<br>                        ]<br>                    )<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pritunl图形化管理openvpn</title>
    <link href="/2024/09/30/pritunl%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86openvpn/"/>
    <url>/2024/09/30/pritunl%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86openvpn/</url>
    
    <content type="html"><![CDATA[<blockquote><p><font style="color:rgb(12, 12, 12);">Pritunl是一款免费开源的 VPN 平台软件（但使用的不是标准的开源许可证，用户受到很多限制）。这是一种简单有效的VPN方式，一方面能有一个相对简单的途径，易于初级用户迅速搭建 VPN 服务；另一方面有能抵御墙的干扰，提供稳定有效的代理服务。Pritunl采用 OpenVPN 代理方式，一方面提供了 API 供高级开发者使用，同时还针对不同平台和不同 VPS 供应商 （包括DigitalOcean和AWS）提供了详尽的安装使用说明，DEMO显示它有图形化界面，方便了初级用户的使用，官方称其能在数分钟内完成搭建过程，这大大的降低了使用门槛。</font></p></blockquote><p><font style="color:rgb(12, 12, 12);"></font></p><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><p>镜像下载: <a href="https://bj.bcebos.com/v1/static-resources/Other/Other/p.tar">https://bj.bcebos.com/v1/static-resources/Other/Other/p.tar</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 创建持久化目录<br>mkdir /data/pritunl/&#123;mongodb,pritunl&#125; -p<br>chown -R daemon:daemon /data/pritunl<br><br><br># 启动docker容器<br>docker run \<br>    -d --name pritunl \<br>    --privileged \<br>   -v /etc/localtime:/etc/localtime \<br>    -p 9004:9004/tcp \<br>    -p 9445:9445/udp \<br>    -p 9445:9445/tcp \<br>    -p 9444:80/tcp \<br>    -p 9443:443/tcp \<br>    -v /data/pritunl/mongodb/:/var/lib/mongodb \<br>    -v /data/pritunl/pritunl/:/var/lib/pritunl \<br>    jippi/pritunl:latest<br># 镜像大小在2G以上<br></code></pre></td></tr></table></figure><ul><li>9443为 https协议的web界面</li><li>9004 为后面创建的vpn的端口</li></ul><p><strong>首次创建完容器 需要初始化web界面的密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it pritunl bash<br>pritunl default-password<br></code></pre></td></tr></table></figure><h2 id="创建vpn"><a href="#创建vpn" class="headerlink" title="创建vpn"></a>创建vpn</h2><h3 id="新建组织"><a href="#新建组织" class="headerlink" title="新建组织"></a>新建组织<img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1705820701221-05239ff1-e77a-4e3b-bf46-8cdca089905c.png"></h3><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1705820690028-81e4afa2-c15d-4ea1-8ccc-b09b1ad3e07b.png"></p><h3 id="新建vpn"><a href="#新建vpn" class="headerlink" title="新建vpn"></a>新建vpn</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1705820866070-844fc452-3f9e-4311-820c-74748ad762cc.png"></p><ul><li><font style="color:rgb(25, 27, 31);">DNS Server：配置为 223.5.5.5，阿里云的dns更稳定 </font><font style="color:#DF2A3F;">如果连接vpn后 需要使用客户端默认的dns、留空即可</font></li><li>port 使用docker提前暴露出来的端口 我这里使用的是9004的tcp协议</li><li><font style="color:rgb(25, 27, 31);">Virtual Network：10.0.0.0&#x2F;24</font></li><li><font style="color:rgb(25, 27, 31);">Enable WireGuard：WireGuard是一种现代的、高性能的VPN协议，旨在简化和改进传统的VPN技术。它被计为更加轻量级和易于配置，具有较小的代码库和更简单的协议。WireGuard使用最新的加密算法和协议，提供了更高的安全性和性能。它支持多种操作系统，并且可以在内核级别运行，从而提供更好的性能和效率。</font></li><li><font style="color:rgb(25, 27, 31);">Allow Multiple Devices：允许同一个账号多个设备接入</font></li></ul><h3 id="配置vpn"><a href="#配置vpn" class="headerlink" title="配置vpn"></a>配置vpn</h3><ul><li>创建server 首先关联组织</li><li>删除默认的0.0.0.0&#x2F;24路由规则 <font style="color:rgb(25, 27, 31);">是为了防止该vpn劫持所有网络。如果你需要劫持所有流量，那就不要删除</font></li><li><font style="color:rgb(25, 27, 31);">添加新的路由 例如k8s 的cidr等网络，都可以进行劫持，方便能直连到容器内 这里的192.168.84.0 属于局域网内部的网络</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1705820921837-a41803a2-701f-4e57-82ec-447920faf144.png"></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p><strong>下载配置 直接导入到客户端中</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1705821136180-d1b5648c-3ee2-42d8-aa7b-46ba4c936a95.png"></p><p>windows: <a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.5-I601.exe">https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.5-I601.exe</a></p><p>mac: <a href="https://github.com/Tunnelblick/Tunnelblick/releases">https://github.com/Tunnelblick/Tunnelblick/releases</a></p><blockquote><p>ubuntu 配置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># cat /lib/systemd/system/openvpn-client.service</span><br>[unit]<br>Description=openvpn service<br><br>[Service]<br><span class="hljs-comment"># Type=simple</span><br><span class="hljs-comment"># WorkingDirectory=/usr/sbin/openvpn</span><br>ExecStart=/usr/sbin/openvpn /etc/openvpn/client/client.conf<br><span class="hljs-comment"># ExecStop=/bin/kill -s TERM $MAINPID</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vpn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rocketmq部署+故障演练</title>
    <link href="/2024/09/30/Rocketmq%E9%83%A8%E7%BD%B2-%E6%95%85%E9%9A%9C%E6%BC%94%E7%BB%83/"/>
    <url>/2024/09/30/Rocketmq%E9%83%A8%E7%BD%B2-%E6%95%85%E9%9A%9C%E6%BC%94%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h2 id="RocketMQ集群工作流程"><a href="#RocketMQ集群工作流程" class="headerlink" title="RocketMQ集群工作流程"></a>RocketMQ集群工作流程</h2><h3 id="NamServer"><a href="#NamServer" class="headerlink" title="NamServer"></a>NamServer</h3><p>NameServer是一个简单的 Topic 路由注册中心，支持 Topic、Broker 的动态注册与发现;</p><p><strong>启动****NameServer</strong> NameServer启动后监听端口，等待Broker、Producer、Consumer连接，相当于一个路由控制中心。</p><p>主要包括两个功能：</p><ul><li><strong>Broker管理</strong>，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；</li><li><strong>路由信息管理</strong>，每个NameServer将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。Producer和Consumer通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。</li></ul><p>NameServer通常会有多个实例部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，客户端仍然可以向其它NameServer获取路由信息</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证。</p><p> 生产环境使用自动容灾切换方案: <strong>RocketMQ-on-DLedger Group <strong>一组</strong>相同名称</strong>的 Broker，至少需要 3 个节点，通过 Raft 自动选举出一个 Leader，其余节点 作为 Follower，并在 Leader 和 Follower 之间复制数据以保证高可用。 RocketMQ-on-DLedger Group 能自动容灾切换，并保证数据一致。 RocketMQ-on-DLedger Group 可以水平扩展 可以部署任意多个 RocketMQ-on-DLedger Group 同时对外提供服务。</p><p>**启动 Broker **与所有 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic跟Broker 的映射关系。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707045-5b36b4e4-d055-4c1d-9da9-1581feba7dd3.png"></p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Rocketmq在5.0 默认开启了 消息类型校验 一个topic只能发送一种类型的消息 </p><ul><li>TRANSACTION：<strong>事务消息</strong></li><li>DELAY：<strong>定时&#x2F;延时消息</strong></li><li>FIFO：<strong>顺序消息</strong></li><li>NORMAL：<strong>普通消息</strong></li></ul><p>创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上、或指定集群名称，也可以在发送消息时自动创建Topic。</p><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><p>生产者发送消息。启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic存在于哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker建立长连接从而向 Broker发消息。</p><h3 id="消费者接受消息"><a href="#消费者接受消息" class="headerlink" title="消费者接受消息"></a>消费者接受消息</h3><p>消费者接受消息。跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，然后开始消费消息。</p><h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><p><strong>集群架构图</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602706839-a2c8d907-5409-4bd3-a3e7-6358252e15b9.png"></p><p><strong>主机规划</strong></p><table><thead><tr><th>主机名称</th><th>主机ip</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>ks-rocketmq-cluster01-rocketmq01</td><td>10.6.28.242</td><td>nameserver+broker+控制台</td><td></td></tr><tr><td>ks-rocketmq-cluster01-rocketmq02</td><td>10.6.230.74</td><td>nameserver+broker</td><td></td></tr><tr><td>ks-rocketmq-cluster01-rocketmq03</td><td>10.6.174.144</td><td>nameserver+broker</td><td></td></tr><tr><td>ks-rocketmq-cluster02-rocketmq04</td><td>10.6.40.117</td><td>nameserver+broker</td><td></td></tr><tr><td>ks-rocketmq-cluster02-rocketmq05</td><td>10.6.120.17</td><td>nameserver+broker</td><td></td></tr><tr><td>ks-rocketmq-cluster02-rocketmq06</td><td>10.6.119.79</td><td>nameserver+broker</td><td></td></tr></tbody></table><h3 id="ks-rocketmq-cluster01-rocketmq01-主机执行"><a href="#ks-rocketmq-cluster01-rocketmq01-主机执行" class="headerlink" title="ks-rocketmq-cluster01-rocketmq01 主机执行"></a><strong>ks-rocketmq-cluster01-rocketmq01 主机执行</strong></h3><ol><li><strong>配置集群内的主机信息</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br>10.6.28.242 ks-rocketmq-cluster01-rocketmq01 <br>10.6.230.74 ks-rocketmq-cluster01-rocketmq02 <br>10.6.174.144 ks-rocketmq-cluster01-rocketmq03 <br>10.6.40.117 ks-rocketmq-cluster02-rocketmq04 <br>10.6.120.17 ks-rocketmq-cluster02-rocketmq05 <br>10.6.119.79 ks-rocketmq-cluster02-rocketmq06 <br>EOF<br></code></pre></td></tr></table></figure><ol><li><strong>设置免密</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">for i in `cat /etc/hosts  |grep ks- |awk &#x27;&#123;print $1&#125;&#x27; `;do ssh-copy-id -o StrictHostKeyChecking=no  $i ;done<br></code></pre></td></tr></table></figure><ol><li><strong>设置主机名称</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh 10.6.28.242   hostnamectl set-hostname ks-rocketmq-cluster01-rocketmq01 <br>ssh 10.6.230.74   hostnamectl set-hostname ks-rocketmq-cluster01-rocketmq02 <br>ssh 10.6.174.144  hostnamectl set-hostname  ks-rocketmq-cluster01-rocketmq03 <br>ssh 10.6.40.117   hostnamectl set-hostname ks-rocketmq-cluster02-rocketmq04 <br>ssh 10.6.120.17   hostnamectl set-hostname ks-rocketmq-cluster02-rocketmq05 <br>ssh 10.6.119.79   hostnamectl set-hostname ks-rocketmq-cluster02-rocketmq06<br></code></pre></td></tr></table></figure><h3 id="安装jdk8-每台主机都执行"><a href="#安装jdk8-每台主机都执行" class="headerlink" title="安装jdk8(每台主机都执行)"></a>安装jdk8(每台主机都执行)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt-get update  &amp;&amp; apt install openjdk-8-jdk -y <br><br>cat &gt;&gt;  /etc/profile  &lt;&lt; EOF<br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/<br>export CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar<br>export PATH=\$PATH:\$JAVA_HOME/bin<br>EOF<br><br><br>java -version <br><br>openjdk version &quot;1.8.0_362&quot;<br>OpenJDK Runtime Environment (build 1.8.0_362-8u372-ga~us1-0ubuntu1~18.04-b09)<br>OpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)<br></code></pre></td></tr></table></figure><h2 id="Rocketmq-安装"><a href="#Rocketmq-安装" class="headerlink" title="Rocketmq****安装"></a><strong>Rocketmq****安装</strong></h2><p><strong>ks-rocketmq-cluster01-rocketmq01 执行 下载****rocketmq</strong></p><p>在第一台主机配置好后 批量复制到其他主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">wget https://archive.apache.org/dist/rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip<br></code></pre></td></tr></table></figure><h3 id="rocketmq-配置修改"><a href="#rocketmq-配置修改" class="headerlink" title="rocketmq 配置修改"></a>rocketmq 配置修改</h3><p><strong>配置文件详细解析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName=KsStoryCluster：指定该 Broker 所属的集群名称。<br>brokerName=KsNode05：指定该 Broker 的名称。<br>listenPort=10911：指定 Broker 监听的端口。<br>namesrvAddr：指定 NameServer 的地址列表，用分号分隔。<br>storePathRootDir：指定存储根目录。<br>storePathCommitLog：指定 CommitLog 文件的存储路径。<br>enableDLegerCommitLog=true：启用 DLedger 模式，支持多副本存储。<br>dLegerGroup=KsNode05：指定 DLedger 组名。<br>dLegerPeers：指定 DLedger 集群中的节点及其端口。<br>dLegerSelfId=n3：指定当前节点的 DLedger ID，必须唯一。<br>sendMessageThreadPoolNums=32：发送消息的线程池数量。<br>deleteWhen=04：每天凌晨 4 点删除过期的消息日志文件。<br>waitTimeMillsInSendQueue=1000：发送队列中等待的时间（毫秒）。<br>useReentrantLockWhenPutMessage=true：在放置消息时使用可重入锁。<br>transientStorePoolEnable=true：启用瞬时存储池。<br>transientStorePoolSize=5：瞬时存储池的大小。<br>flushDiskType=ASYNC_FLUSH：指定磁盘刷新类型为异步刷新。<br>fileReservedTime=168：文件保留时间，单位为小时，这里是 168 小时（7 天）。<br>autoCreateTopicEnable=false：禁用自动创建 Topic。<br>tracetopicEnable=true：启用消息轨迹功能。<br>slaveReadEnable=true：允许从节点读取。<br>warmMapedFileEnable=true：启用内存映射文件的预热。<br>brokerRole=ASYNC_MASTER：设置 Broker 角色为异步主节点。<br>osPageCacheBusyTimeOutMills=5000：操作系统页面缓存繁忙超时时间，单位为毫秒。<br>waitTimeMillsInSendQueue=3000：发送队列中等待的时间（毫秒），这里有两处配置，最后一处会覆盖前一处（如果文件中有多个相同的配置项，以最后一个为准）。<br></code></pre></td></tr></table></figure><h3 id="每个主机修改后的配置"><a href="#每个主机修改后的配置" class="headerlink" title="每个主机修改后的配置"></a>每个主机修改后的配置</h3><p><strong>第一组集群</strong></p><p><strong>ks-rocketmq-cluster01-rocketmq01配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n3.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode05-YanLian<br>listenPort=10911<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node03<br>storePathCommitLog=/data/rmqstore/node03/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode05-YanLian<br>dLegerPeers=n3-10.6.28.242:20911;n4-10.6.230.74:20912;n5-10.6.174.144:20913<br>## must be unique<br>dLegerSelfId=n3<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><p><strong>配置文件拷贝到其他主机</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">scp -r  rocketmq-4.9.2 10.6.230.74:/usr/local/<br>scp -r  rocketmq-4.9.2 10.6.174.144:/usr/local/<br><br>scp -r  rocketmq-4.9.2 10.6.40.117:/usr/local/<br>scp -r  rocketmq-4.9.2 10.6.120.17:/usr/local/<br>scp -r  rocketmq-4.9.2 10.6.119.79:/usr/local/<br></code></pre></td></tr></table></figure><p><strong>ks-rocketmq-cluster01-rocketmq02配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n4.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode05-YanLian<br>listenPort=10921<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node04<br>storePathCommitLog=/data/rmqstore/node04/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode05-YanLian<br>dLegerPeers=n3-10.6.28.242:20911;n4-10.6.230.74:20912;n5-10.6.174.144:20913<br>## must be unique<br>dLegerSelfId=n4<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><p><strong>ks-rocketmq-cluster01-rocketmq03配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n5.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode05-YanLian<br>listenPort=10931<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node05<br>storePathCommitLog=/data/rmqstore/node05/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode05-YanLian<br>dLegerPeers=n3-10.6.28.242:20911;n4-10.6.230.74:20912;n5-10.6.174.144:20913<br>## must be unique<br>dLegerSelfId=n5<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><p>第二组集群</p><p><strong>ks-rocketmq-cluster02-rocketmq04配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n3.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode06-YanLian<br>listenPort=10911<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node03<br>storePathCommitLog=/data/rmqstore/node03/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode06-YanLian<br>dLegerPeers=n3-10.6.40.117:20911;n4-10.6.120.17:20912;n5-10.6.119.79:20913<br>## must be unique<br>dLegerSelfId=n3<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><p><strong>ks-rocketmq-cluster02-rocketmq05配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n4.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode06-YanLian<br>listenPort=10921<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node04<br>storePathCommitLog=/data/rmqstore/nod04/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode06-YanLian<br>dLegerPeers=n3-10.6.40.117:20911;n4-10.6.120.17:20912;n5-10.6.119.79:20913<br>## must be unique<br>dLegerSelfId=n4<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><p><strong>ks-rocketmq-cluster02-rocketmq06配置文件</strong></p><ul><li>&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;conf&#x2F;dledger&#x2F;broker-n5.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain">brokerClusterName = KsStoryClusterYanLian<br>brokerName=KsNode06-YanLian<br>listenPort=10931<br>namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876<br>storePathRootDir=/data/rmqstore/node05<br>storePathCommitLog=/data/rmqstore/node05/commitlog<br>enableDLegerCommitLog=true<br>dLegerGroup=KsNode06-YanLian<br>dLegerPeers=n3-10.6.40.117:20911;n4-10.6.120.17:20912;n5-10.6.119.79:20913<br>## must be unique<br>dLegerSelfId=n5<br>sendMessageThreadPoolNums=2<br><br>## new add conf<br>deleteWhen=04<br>waitTimeMillsInSendQueue=1000<br>useReentrantLockWhenPutMessage=true<br>transientStorePoolEnable=true<br>transientStorePoolSize=1<br>flushDiskType=ASYNC_FLUSH<br>fileReservedTime=168<br>autoCreateTopicEnable=false<br>tracetopicEnable=true<br>slaveReadEnable=true<br>warmMapedFileEnable=true<br>brokerRole=ASYNC_MASTER<br>osPageCacheBusyTimeOutMills=5000<br>waitTimeMillsInSendQueue=3000<br></code></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><strong>详细配置在进程管理工具中</strong></p><h3 id="命令行验证集群状态"><a href="#命令行验证集群状态" class="headerlink" title="命令行验证集群状态"></a>命令行验证集群状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 设置nameserver地址<br>export NAMESRV_ADDR=&quot;10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876&quot;<br><br>cd /usr/local/rocketmq-4.9.2/bin/<br>./mqadmin clusterList <br>#Cluster Name     #Broker Name            #BID  #Addr                  #Version                #InTPS(LOAD)       #OutTPS(LOAD) #PCWait(ms) #Hour #SPACE<br>KsStoryClusterYanLian  KsNode05-YanLian        0     10.6.230.74:10921      V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.0900<br>KsStoryClusterYanLian  KsNode05-YanLian        4     10.6.28.242:10911      V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.1000<br>KsStoryClusterYanLian  KsNode05-YanLian        6     10.6.174.144:10931     V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.0900<br>KsStoryClusterYanLian  KsNode06-YanLian        0     10.6.120.17:10921      V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.0900<br>KsStoryClusterYanLian  KsNode06-YanLian        4     10.6.40.117:10911      V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.0900<br>KsStoryClusterYanLian  KsNode06-YanLian        6     10.6.119.79:10931      V4_9_2                   0.00(0,0ms)         0.00(0,0ms)          0 478442.56 0.0900<br></code></pre></td></tr></table></figure><h2 id="Rocketmq-控制台安装"><a href="#Rocketmq-控制台安装" class="headerlink" title="Rocketmq 控制台安装"></a>Rocketmq <strong>控制台安装</strong></h2><h3 id="安装-maven"><a href="#安装-maven" class="headerlink" title="安装****maven"></a><strong>安装****maven</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">wget https://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz<br></code></pre></td></tr></table></figure><p><strong>配置阿里云源 下载依赖更快</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">conf/settings.xml <br>&lt;mirrors&gt;<br>...<br>新增<br>    &lt;mirror&gt;<br>                &lt;id&gt;aliyunmaven&lt;/id&gt;<br>                    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>                        &lt;name&gt;阿里云公共仓库&lt;/name&gt;<br>                            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;<br>                    &lt;/mirror&gt;<br>    &lt;mirror&gt;<br></code></pre></td></tr></table></figure><h3 id="安装控制台"><a href="#安装控制台" class="headerlink" title="安装控制台"></a>安装控制台</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone https://github.com/muyan-yootk/rocketmq-externals.git<br>cd rocketmq-externals-master/rocketmq-console<br></code></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><ul><li>src&#x2F;main&#x2F;resources&#x2F;application.properties (主配置文件)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">server.contextPath=<br>server.port=8080<br><br>### SSL setting<br>#server.ssl.key-store=classpath:rmqcngkeystore.jks<br>#server.ssl.key-store-password=rocketmq<br>#server.ssl.keyStoreType=PKCS12<br>#server.ssl.keyAlias=rmqcngkey<br><br>#spring.application.index=true<br>spring.application.name=rocketmq-console<br>spring.http.encoding.charset=UTF-8<br>spring.http.encoding.enabled=true<br>spring.http.encoding.force=true<br>logging.config=classpath:logback.xml<br>#if this value is empty,use env value rocketmq.config.namesrvAddr  NAMESRV_ADDR | now, you can set it in ops page.default localhost:9876<br>rocketmq.config.namesrvAddr=10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876    # 修改此处 填写nameserver<br>#if you use rocketmq version &lt; 3.5.8, rocketmq.config.isVIPChannel should be false.default true<br>rocketmq.config.isVIPChannel=<br>#rocketmq-console&#x27;s data path:dashboard/monitor<br>rocketmq.config.dataPath=/tmp/rocketmq-console/data    # 前端持久化存储文件<br>#set it false if you don&#x27;t want use dashboard.default true<br>rocketmq.config.enableDashBoardCollect=true<br>#set the message track trace topic if you don&#x27;t want use the default one<br>rocketmq.config.msgTrackTopicName=<br>rocketmq.config.ticketKey=ticket<br><br>#Must create userInfo file: $&#123;rocketmq.config.dataPath&#125;/users.properties if the login is required<br>rocketmq.config.loginRequired=true   # 开启控制台登录权限认证<br></code></pre></td></tr></table></figure><ul><li>src&#x2F;main&#x2F;resources&#x2F;users.properties (用户管理)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 加入一下内容 最后1 代表超管 默认为普通用户0<br>admin=Tkamc.00!@#123,1  <br><br># Define Users<br>rocketmq1=rocketmq1!@#123<br>rocketmq2=rocketmq2!@#123<br></code></pre></td></tr></table></figure><p><strong>编译</strong></p><p>回到pom.xml 目录同级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd rocketmq-externals-master/rocketmq-console<br>/root/apache-maven-3.8.4/bin/mvn clean package -Dmaven.test.skip=true<br></code></pre></td></tr></table></figure><p><strong>启动服务</strong></p><p>编译完成后 target会生成一个jar包 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">mv target/rocketmq-console-ng-1.0.1.jar /opt/<br></code></pre></td></tr></table></figure><p><strong>启动命令详细配置在进程管理工具中</strong></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602706794-f55f2961-2a8b-436b-b2c5-0b267a0a5894.png"></p><h2 id="安装进程管理工具-每个主机都执行"><a href="#安装进程管理工具-每个主机都执行" class="headerlink" title="安装进程管理工具(每个主机都执行)"></a>安装进程管理工具(每个主机都执行)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt-get install supervisor<br></code></pre></td></tr></table></figure><h3 id="supervisor-主配置文件"><a href="#supervisor-主配置文件" class="headerlink" title="supervisor 主配置文件"></a><strong>supervisor 主配置文件</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">; supervisor config file<br><br>[unix_http_server]<br>file=/var/run/supervisor.sock   ; (the path to the socket file)<br>chmod=0700                       ; sockef file mode (default 0700)<br><br>[supervisord]<br>logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)<br>pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)<br>childlogdir=/var/log/supervisor            ; (&#x27;AUTO&#x27; child log dir, default $TEMP)<br>minfds=65535<br><br>; the below section must remain in the config file for RPC<br>; (supervisorctl/web interface) to work, additional interfaces may be<br>; added by defining them in separate rpcinterface: sections<br>[rpcinterface:supervisor]<br>supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface<br><br>[supervisorctl]<br>serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket<br><br>; The [include] section can just contain the &quot;files&quot; setting.  This<br>; setting can list multiple files (separated by whitespace or<br>; newlines).  It can also contain wildcards.  The filenames are<br>; interpreted as relative to this file.  Included files *cannot*<br>; include files themselves.<br><br>[include]<br>files = /etc/supervisor/conf.d/*.conf<br></code></pre></td></tr></table></figure><p><strong>创建目录 存储日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">mkdir /data/logs/rocketmq-4.9.2/ -p<br></code></pre></td></tr></table></figure><h3 id="启动nameserver配置文件"><a href="#启动nameserver配置文件" class="headerlink" title="启动nameserver配置文件"></a><strong>启动<strong><strong>nameserver</strong></strong>配置文件</strong></h3><p>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;mqnamesrv-4.9.2.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">program:mqnamesrv-4.9.2]<br>environment=JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;,ROCKETMQ_HOME=&quot;/usr/local/rocketmq-4.9.2&quot;<br>directory = /usr/local/rocketmq-4.9.2<br>command = bash /usr/local/rocketmq-4.9.2/bin/runserver.sh org.apache.rocketmq.namesrv.NamesrvStartup<br>user = rocketmq<br>autostart = true<br>autorestart = true<br>stopsignal=QUIT<br>stopwaitsecs=10<br>stopasgroup=true<br>killasgroup=true<br>stdout_logfile = /data/logs/rocketmq-4.9.2/mqnamesrv_stdout.log<br>stderr_logfile = /data/logs/rocketmq-4.9.2/mqnamesrv_stderr.log<br></code></pre></td></tr></table></figure><h3 id="启动broker配置文件"><a href="#启动broker配置文件" class="headerlink" title="启动broker配置文件"></a><strong>启动broker配置文件</strong></h3><p>这里演练机器配置不高 修改&#x2F;usr&#x2F;local&#x2F;rocketmq-4.9.2&#x2F;bin&#x2F;runbroker.sh jvm 内存配置 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=3g&quot;<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;mqbroker-4.9.2.conf </p><p>这里的broker-n3.conf配置文件 每个主机不一样 按照情况配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">[program:mqbroker-4.9.2]<br>environment=JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;,ROCKETMQ_HOME=&quot;/usr/local/rocketmq-4.9.2&quot;<br>directory = /usr/local/rocketmq-4.9.2<br>command = bash /usr/local/rocketmq-4.9.2/bin/runbroker.sh org.apache.rocketmq.broker.BrokerStartup -c /usr/local/rocketmq-4.9.2/conf/dledger/broker-n3.conf<br>user = root<br>autostart = true<br>autorestart = true<br>stopsignal=TERM<br>stopwaitsecs=10<br>stopasgroup=true<br>killasgroup=true<br>stdout_logfile = /data/logs/rocketmq-4.9.2/mqbroker_stdout.log<br>stderr_logfile = /data/logs/rocketmq-4.9.2/mqbroker_stderr.log<br></code></pre></td></tr></table></figure><h3 id="启动Dashboard配置文件"><a href="#启动Dashboard配置文件" class="headerlink" title="启动Dashboard配置文件"></a><strong>启动Dashboard配置文件</strong></h3><p><strong>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;mqdashboard.conf (只有安装控制台的主机才配置)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">[program:mqdashboard]<br>environment=JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;<br>directory = /opt/<br>command = java -jar /opt/rocketmq-console-ng-1.0.1.jar <br>user = root<br>autostart = true<br>autorestart = true<br>stopsignal=TERM<br>stopwaitsecs=10<br>stopasgroup=true<br>killasgroup=true<br>stdout_logfile = /data/logs/rocketmq-4.9.2/mqdashboard_stdout.log<br>stderr_logfile = /data/logs/rocketmq-4.9.2/mqdashboard_stderr.log<br></code></pre></td></tr></table></figure><h3 id="进程工具常用命令"><a href="#进程工具常用命令" class="headerlink" title="进程工具常用命令"></a><strong>进程工具常用命令</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 重启守护进程<br>systemctl restart supervisor.service <br>supervisorctl reload <br><br># 查看进程状态<br>supervisorctl status<br><br># 重启单个进程 <br>supervisorctl restart mqdashboard<br><br># 启动单个进程<br>supervisorctl start mqdashboard<br><br># 关闭单个进程<br>supervisorctl stop mqdashboard<br><br># 重启所有进程<br>supervisorctl restart all<br></code></pre></td></tr></table></figure><h2 id="验证Rocketmq集群"><a href="#验证Rocketmq集群" class="headerlink" title="验证Rocketmq集群"></a>验证Rocketmq集群</h2><p>使用python脚本 模块地址: <a href="https://github.com/apache/rocketmq-client-python">https://github.com/apache/rocketmq-client-python</a></p><p>使用ubuntu系统启动 生产者 消费者脚本</p><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a><strong>安装模块</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">wget https://github.com/apache/rocketmq-client-cpp/releases/download/2.0.0/rocketmq-client-cpp-2.0.0.amd64.deb<br>    sudo dpkg -i rocketmq-client-cpp-2.0.0.amd64.deb<br>    pip install rocketmq-client-python<br></code></pre></td></tr></table></figure><h3 id="生产者脚本"><a href="#生产者脚本" class="headerlink" title="生产者脚本"></a>生产者脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain"># producer.py<br>from rocketmq.client import Producer, Message<br>import time<br><br>def main():<br>    producer = Producer(&#x27;producer_group_test&#x27;)<br>    producer.set_name_server_address(&#x27;10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876&#x27;)  # 替换为你的 NameServer 地址<br>    producer.start()<br>    <br>    num = 0 <br>    while True:<br>        msg = Message(&#x27;myTopic&#x27;)<br>        msg.set_keys(&#x27;key%s&#x27; % num )<br>        msg.set_tags(&#x27;tag%s&#x27; % num)<br>        msg.set_body(&#x27;Hello RocketMQ %s&#x27; % num)<br>    <br>        ret = producer.send_sync(msg)<br>        print(f&#x27;Send Status: &#123;ret.status&#125;, Message ID: &#123;ret.msg_id&#125;&#x27;)<br>        num += 1<br>        time.sleep(1)<br><br>    producer.shutdown()<br><br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="消费者脚本"><a href="#消费者脚本" class="headerlink" title="消费者脚本"></a>消费者脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain"># consumer.py<br>from rocketmq.client import PushConsumer, ConsumeStatus<br><br>def callback(msg):<br>    print(f&#x27;Received message: &#123;msg.body.decode(&quot;utf-8&quot;)&#125;&#x27;)<br>    return ConsumeStatus.CONSUME_SUCCESS<br><br>def main():<br>    consumer = PushConsumer(&#x27;consumer_group_test&#x27;)<br>    consumer.set_name_server_address(&#x27;10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876&#x27;)  # 替换为你的 NameServer 地址<br>    consumer.subscribe(&#x27;myTopic&#x27;, callback)<br>    <br>    consumer.start()<br><br>    print(&#x27;Consumer started. Waiting for messages...&#x27;)<br>    import time<br>    while True:<br>        time.sleep(3600)  # Keep the consumer running<br><br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><p>创建topic </p><p>程序默认不会创建 需要手动创建完 执行脚本</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602706785-5cf663f7-9293-409e-8900-e5ca1a70da8c.png"></p><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p><strong>启动生产者</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707045-1910994d-2925-4ee8-a58e-6c97a15840b4.png"></p><p><strong>启动消费者</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707567-d3d9b449-237b-4e21-b2ba-ea5e41367b42.png"></p><p>生产者详情</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707565-c72f0873-5f74-4d37-8fb2-aead394ddec0.png"></p><p>消费详情</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707552-a5316c25-8311-495a-92bb-47bb0da6deaf.png"></p><h2 id="集群故障演练"><a href="#集群故障演练" class="headerlink" title="集群故障演练"></a>集群故障演练</h2><h3 id="模拟KsNode05-YanLian-一个master节点下线"><a href="#模拟KsNode05-YanLian-一个master节点下线" class="headerlink" title="模拟KsNode05-YanLian 一个master节点下线"></a>模拟KsNode05-YanLian 一个master节点下线</h3><p><strong>正常状态</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602707604-3b87bc59-8811-4284-b747-39ea6f8acff2.png"></p><p><strong>下线KsNode05-YanLian的<strong><strong>master</strong></strong>节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh 10.6.230.74<br>supervisorctl stop mqbroker-4.9.2  # 下线<br></code></pre></td></tr></table></figure><p><strong>集群状态</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708088-4f2a16dc-ab88-4b84-bff8-07b9d49a9ce3.png"></p><p><strong>消费者消费正常 且id一直在自增 说明生产者也在正常工作 (topic同时注册到了Node5、Node6中)</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708095-06d4449f-5ed3-4e08-afc2-6b76637396f5.png"></p><h3 id="模拟KsNode05-YanLian-一个master节点下线后-再下线新提权的master"><a href="#模拟KsNode05-YanLian-一个master节点下线后-再下线新提权的master" class="headerlink" title="模拟KsNode05-YanLian 一个master节点下线后 再下线新提权的master"></a>模拟KsNode05-YanLian 一个master节点下线后 再下线新提权的master</h3><p><strong>集群状态</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708253-9991a78f-67a5-49b0-b72a-28aa05064817.png"></p><p><strong>下线KsNode05-YanLian的<strong><strong>master</strong></strong>节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh 10.6.28.242<br>supervisorctl stop mqbroker-4.9.2<br></code></pre></td></tr></table></figure><p><strong>集群状态</strong></p><p><strong>KsNode05-YanLian组的两个<strong><strong>master</strong></strong>全部下线后，<strong><strong>slave</strong></strong>不会再提权为master了 这里的slave生产总数不再增加了 说明这组集群已经失去了 写入的能力， 没有了写入 自然也不会有读取的数据 这组集群基本失去工作能力了</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708246-1ccbfc8a-55df-4e52-8913-a7e0d0c28116.png"></p><p><strong>消费者消费正常 且id一直在自增 说明生产者也在正常工作(topic同时注册到了Node5、Node6中)</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708544-336d464c-81c9-4c02-9283-7b1822642732.png"></p><h3 id="模拟KsNode05-YanLian-一个master节点下线后-再下线一个slave"><a href="#模拟KsNode05-YanLian-一个master节点下线后-再下线一个slave" class="headerlink" title="模拟KsNode05-YanLian 一个master节点下线后 再下线一个slave"></a>模拟KsNode05-YanLian 一个master节点下线后 再下线一个slave</h3><p><strong>集群状态</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708772-013e9863-6741-4ef7-8a14-251e4a6290ab.png"></p><p><strong>下线KsNode05-YanLian的<strong><strong>slave</strong></strong>节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh 10.6.230.74<br>supervisorctl stop mqbroker-4.9.2<br></code></pre></td></tr></table></figure><p><strong>集群状态</strong></p><p>10.6.174.144从原来的master 自动被降级到了slave <strong>集群已经失去了 写入的能力， 没有了写入 自然也不会有读取的数据 这组集群基本失去工作能力了</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708853-9e04a964-67b6-4a26-81da-559b46d3e21c.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Topic创建时应选择 注册到所有的组中</strong></p><ul><li>一组集群中至少需要存活两个broker 当一组中只剩下一个broker 这组集群就丧失了 写入的能力</li><li>多组集群同时挂掉2个broker rocketmq不可用 生产者无法再生产数据 由于slave还在线 broker中已有的数据还可正常消费</li></ul><h3 id="Topic导出导入"><a href="#Topic导出导入" class="headerlink" title="Topic导出导入"></a>Topic导出导入</h3><h4 id="Rocketmq-Topic-导出-4-x"><a href="#Rocketmq-Topic-导出-4-x" class="headerlink" title="Rocketmq Topic 导出(4.x)"></a>Rocketmq Topic 导出(4.x)</h4><p>命令导出为集群内所有topic 导入到别的集群中 应删除系统自建的Topic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">/usr/local/rocketmq-4.9.2/bin/mqadmin topicList<br></code></pre></td></tr></table></figure><h4 id="自建集群创建topic-4-x"><a href="#自建集群创建topic-4-x" class="headerlink" title="自建集群创建topic(4.x)"></a>自建集群创建topic(4.x)</h4><ul><li>-c 指定集群名称</li><li>-n 指定nameserver 地址</li><li>-t 指定topic名称</li><li>-r 队列读取数量</li><li>-w 队列写入数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">mqadmin updateTopic -c KsStoryClusterYanLian  -n &#x27;10.6.28.242:9876;10.6.230.74:9876;10.6.174.144:9876;10.6.40.117:9876;10.6.120.17:9876;10.6.119.79:9876&#x27; -t gph -r 16 -w 16<br></code></pre></td></tr></table></figure><h4 id="阿里云导入topic-调研-rocketmq-5-x"><a href="#阿里云导入topic-调研-rocketmq-5-x" class="headerlink" title="阿里云导入topic 调研 (rocketmq 5.x)"></a>阿里云导入topic 调研 (rocketmq 5.x)</h4><p>阿里云支持一键导入功能 需要准备 <strong>topicName****MessageType Remark</strong></p><ul><li><strong>topicName 名称</strong></li><li>**MessageType 消息类型: **<strong><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/01normalmessage">https://rocketmq.apache.org/zh/docs/featureBehavior/01normalmessage</a></strong></li></ul><p>默认5.0开始 <font style="color:rgb(216,57,49);">开启了强制校验功能 每个topic 只允许发送一种消息类型的消息 为兼容4.x 需要关闭校验消息类型</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1723602708912-463ae94d-5110-44a9-b158-c9e692cd88e0.png"></p><ul><li><strong>Remark Topic备注</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell设置免密登陆</title>
    <link href="/2024/09/30/Shell%E8%AE%BE%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/"/>
    <url>/2024/09/30/Shell%E8%AE%BE%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</url>
    
    <content type="html"><![CDATA[<p><strong>免交互命令行方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sshpass -p 密码 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 user@1.1.1.1 &quot;uptime&quot;<br></code></pre></td></tr></table></figure><ul><li><strong>方式1：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span> <br>IPLIST=&quot;<br>11.7.171.36<br>11.7.171.37<br>&quot;<br><br><br>rqm -qa sshpass &amp;&gt; /dev/null || yum -y install sshpass<br>[ -f /root/.ssh/id_rsa ] || ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27; <br>export SSHPASS=&#x27;root&#x27;<br><br>for ip in $IPLIST<br>do<br>  sshpass -e ssh-copy-id -o StrictHostkeyChecking=no $ip<br>done<br></code></pre></td></tr></table></figure><ul><li><strong>方式2：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span> <br><br>host_file=&quot;host_tmp.txt&quot;<br><br>host=$1<br>passwd=$2<br>username=&quot;root&quot;<br>[ $# -ne 2 ] &amp;&amp; echo &quot;Please input parameter host password&quot; &amp;&amp; exit <br>echo &quot;$host $username $passwd &quot; &gt;$host_file<br><br>while read host ;do<br><span class="hljs-meta prompt_">  #</span><span class="language-bash">ip user passwd</span> <br>  ip=$(echo $host|awk &#x27;&#123;print $1&#125;&#x27;)<br>  user=$(echo $host|awk &#x27;&#123;print $2&#125;&#x27;)<br>  passwd=$(echo $host|awk &#x27;&#123;print $3&#125;&#x27;)<br>expect &lt;&lt;EOF<br>        spawn ssh-copy-id -i $user@$ip<br>        expect &#123;<br>                &quot;yes/no&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125;<br>                &quot;password&quot; &#123;send &quot;$passwd\n&quot;&#125;<br>        &#125;<br>        expect eof<br>EOF<br>  echo &quot;$host -- $user 完成了免密登录!&quot;<br>done &lt; $host_file<br>rm -f $host_file<br></code></pre></td></tr></table></figure><h2 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">---<br>- hosts: auth<br>  gather_facts: no<br><br>  tasks:<br><br>  - name: install ssh key<br>    authorized_key: user=root<br>                    key=<span class="hljs-string">&quot;&#123;&#123; lookup(&#x27;file&#x27;, &#x27;/root/.ssh/id_rsa.pub&#x27;) &#125;&#125;&quot;</span><br>                    state=present<br><br><br>ansible-playbook ssh-login.yml --ask-<span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自动化运维管理工具 - Ansible</title>
    <link href="/2024/09/30/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Ansible/"/>
    <url>/2024/09/30/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Ansible/</url>
    
    <content type="html"><![CDATA[<p><strong>本文参考文章</strong></p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg4NTE2NjkxMw==&mid=2247485264&idx=1&sn=8230fea573bd80e4b2d1460c934dae1d&chksm=cfac417ef8dbc8681c807eeb056eeca7f693a5b02708396c4373d065aa464377b5a1bd269182&scene=21#wechat_redirect">Ansible 基础篇参考</a></li><li><a href="https://mp.weixin.qq.com/s/CoebqvUgZN2VrVjOxrsdbA">Ansible Playbook进阶篇参考</a></li><li><a href="https://galaxy.ansible.com/">Ansible Playbook分享平台官网</a></li></ul><hr><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><p><strong>Ansible部署</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip download ansible<br>pip install  *whl<br></code></pre></td></tr></table></figure><blockquote><p>默认没有创建 &#x2F;etc&#x2F;ansible 需要手动创建</p></blockquote><p><strong>Ansible配置说明</strong></p><ul><li><code>/etc/ansible/ansible.cfg</code> 主配置文件, 配置ansible的工作特性.</li><li><code>/etc/ansible/ansible.cfg</code> 主机列表清单.</li><li><code>/etc/ansible/roles/</code> 存放(roles)角色的目录.</li><li><code>/usr/local/bin/ansible</code> 二进制执行文件, ansible 主程序.</li><li><code>/usr/local/bin/ansilbe-doc</code> 配置文档, 模块功能查看工具.</li><li><code>/usr/local/bin/ansible-galaxy</code> 用于上传&#x2F;下载 roles 模块到官方平台的工具.</li><li><code>/usr/local/bin/ansible-playbook</code> 自动化任务、编排剧本工具&#x2F;usr&#x2F;bin&#x2F;ansible-pull 远程执行命令的工具.</li><li><code>/usr/local/bin/ansible-vault</code> 文件(如: playbook 文件) 加密工具.</li><li><code>/usr/local/bin/ansible-console</code> 基于 界面的用户交互执行工具.</li></ul><hr><p><strong>Ansible执行过程</strong></p><ol><li>load配置文件 &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</li><li>Load 模块配置文件</li><li>通过 Ansible 将调用的模块或PlayBook生成对应的临时 py文件, 并将该临时文件传输至远程服务器的对的执行用户目录下 <code>$HOME/.ansible/tmp/ansible-tmp-2123/xxxxxxx.py</code> &gt;文件.</li><li>对生成的文件添加可执行权限.</li><li>执行生成文件，并返回对应的结果.</li><li>删除生成文件，退出.执行返回状态：</li><li><ul><li>绿色：执行成功，无更改操作。如 ping模块</li><li>黄色：执行成功，更新过主机的操作。如执行shell模块执行ifconfig命令。</li><li>红色：执行失败返回结果。如FAILED、UNREACHABLE状态。</li></ul></li></ol><hr><p><strong>Ansible-Doc</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示可用的模块</span><br>ansible-doc -l<br><br>ansible-doc ping <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示指定模块的playbook阶段</span><br>ansible-doc -s ping <br></code></pre></td></tr></table></figure><hr><p><strong>Ansible</strong></p><p><code>ansible &lt;host-pattern&gt; [-m module_name] [-a args]</code></p><ul><li>host-pattern: 主机ip、主机名、主机组。</li><li>module_name: 模块的名称。默认为 -m command 。</li><li>args: 模块的参数, 需要加上 -a 进行指定模块的参数。如: <code>ansible all -a &#39;hostname&#39;</code></li><li>-v、-vv、-vvv: 显示详细的命令输出日志, v 越多越详细。如: <code>ansible all -m ping -vvv</code></li><li>–list: 显示主机的列表。如: <code>ansible all --list</code></li><li>-k &#x2F; –ask-pass: 提示输入ssh连接密码, 默认为 ssh-key 认证。如: <code>ansible all -m ping -k</code></li><li>-K &#x2F; –ask-become-pass: 提示输入 sudo 的密码。</li><li>-C &#x2F; –check: 检查命令操作, 并不会执行。如: <code>ansible all -m ping -C</code></li><li>-T &#x2F; –timeout: 执行命令的超时时间, 默认为 10s。如: <code>ansible all -m ping -T=2</code></li><li>-u &#x2F; –user: 执行远程操作的用户. 如: <code>ansible all -m ping -u=root</code></li><li>-b &#x2F; –become: 代替旧版的 sudo 切换。</li><li>-i 指定主机清单文件 <code>ansible -i /data/ansible/hosts containers  -m ping -o </code></li></ul><hr><p><strong>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">defaults 为默认配置</span><br>[defaults]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">主机清单的路径, 默认为如下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">inventory = /etc/ansible/hosts</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">模块存放的路径</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">library = /usr/share/my_modules/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">utils 模块存放路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">module_utils = /usr/share/my_module_utils/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">远程主机脚本临时存放目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">remote_tmp = ~/.ansible/tmp</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">管理节点脚本临时存放目录</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">local_tmp = ~/.ansible/tmp</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">插件的配置文件路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">plugin_filters_cfg = /etc/ansible/plugin_filters.yml</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行并发数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">forks = 5</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">异步任务查询间隔 单位秒</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">poll_interval  = 15</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">sudo</span> 指定用户</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo_user = root</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行 ansible 是否提示输入<span class="hljs-built_in">sudo</span>密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ask_sudo_pass = True</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行 ansible 是否提示输入密码 同 -k</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ask_pass = True</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">远程传输模式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">transport = smart</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SSH 默认端口</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">remote_port = 22</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">模块运行默认语言环境</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">module_lang = C</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">roles 存放路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">roles_path = /etc/ansible/roles</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不检查 /root/.ssh/known_hosts 文件 建议取消</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">host_key_checking = False</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ansible 操作日志路径 建议打开</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">log_path = /var/log/ansible.log</span><br></code></pre></td></tr></table></figure><hr><h3 id="主机存活探测模块-ping"><a href="#主机存活探测模块-ping" class="headerlink" title="主机存活探测模块 ping"></a>主机存活探测模块 ping</h3><p><strong>&#x2F;etc&#x2F;ansible&#x2F;hosts主机资产配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[containers]<br>172.17.0.4   # 主机1 <br>172.17.0.[5:7]  # 主机 172.17.0.5 - 172.17.0.7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置containers的登陆用户及密码</span><br>[containers:vars]<br>ansible_ssh_user=&#x27;root&#x27;<br>ansible_ssh_pass=&#x27;666666&#x27;<br></code></pre></td></tr></table></figure><p><strong>跳过第一次登陆认证(输入yes的那个操作)</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># uncomment this to disable SSH key host checking</span><br><span class="hljs-string">host_key_checking</span> <span class="hljs-string">=</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible containers -m ping -o <br>172.17.0.4 | SUCCESS =&gt; &#123;&quot;ansible_facts&quot;: &#123;&quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;&#125;,&quot;changed&quot;: false,&quot;ping&quot;: &quot;pong&quot;&#125;<br>172.17.0.5 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host 172.17.0.5 port 22: No route to host<br>172.17.0.7 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host 172.17.0.7 port 22: No route to host<br>172.17.0.6 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host 172.17.0.6 port 22: No route to host<br></code></pre></td></tr></table></figure><hr><h3 id="内置变量模块-setup"><a href="#内置变量模块-setup" class="headerlink" title="内置变量模块 setup"></a>内置变量模块 setup</h3><p><strong>使用范例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible all  -m setup -a &#x27;filter=ansible_hostname &#x27; <br>123.57.71.226 | SUCCESS =&gt; &#123;<br>    &quot;ansible_facts&quot;: &#123;<br>        &quot;ansible_hostname&quot;: &quot;123-57-71-226&quot;,<br>        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python3&quot;<br>    &#125;,<br>    &quot;changed&quot;: false<br>&#125;<br>172.17.0.4 | SUCCESS =&gt; &#123;<br>    &quot;ansible_facts&quot;: &#123;<br>        &quot;ansible_hostname&quot;: &quot;64076cdad7f4&quot;,<br>        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;<br>    &#125;,<br>    &quot;changed&quot;: false<br>&#125;<br>172.17.0.5 | SUCCESS =&gt; &#123;<br>    &quot;ansible_facts&quot;: &#123;<br>        &quot;ansible_hostname&quot;: &quot;eb3d371118b7&quot;,<br>        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;<br>    &#125;,<br>    &quot;changed&quot;: false<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs latex">ansible<span class="hljs-built_in">_</span>form<span class="hljs-built_in">_</span>factor                     服务器类型  <br>ansible<span class="hljs-built_in">_</span>virtualization<span class="hljs-built_in">_</span>role             虚拟机角色（宿主机或者虚拟机）  <br>ansible<span class="hljs-built_in">_</span>virtualization<span class="hljs-built_in">_</span>type             虚拟机类型（kvm）  <br>ansible<span class="hljs-built_in">_</span>system<span class="hljs-built_in">_</span>vendor                   供应商（Dell）  <br>ansible<span class="hljs-built_in">_</span>product<span class="hljs-built_in">_</span>name                    产品型号（PowerEdge?R530）  <br>ansible<span class="hljs-built_in">_</span>product<span class="hljs-built_in">_</span>serial                  序列号（sn）  <br>ansible<span class="hljs-built_in">_</span>machine                         计算机架构（x86<span class="hljs-built_in">_</span>64）  <br>ansible<span class="hljs-built_in">_</span>bios<span class="hljs-built_in">_</span>version                    BIOS版本  <br>ansible<span class="hljs-built_in">_</span>system                          操作系统类型（linux）  <br>ansible<span class="hljs-built_in">_</span>os<span class="hljs-built_in">_</span>family                       操作系统家族（RedHat）  <br>ansible<span class="hljs-built_in">_</span>distribution                    操作系统发行版（CentOS）  <br>ansible<span class="hljs-built_in">_</span>distribution<span class="hljs-built_in">_</span>major<span class="hljs-built_in">_</span>version      操作系统发行版主版本号（7）  <br>ansible<span class="hljs-built_in">_</span>distribution<span class="hljs-built_in">_</span>release            操作系统发行版代号（core）  <br>ansible<span class="hljs-built_in">_</span>distribution<span class="hljs-built_in">_</span>version            操作系统发行版本号（7.3.1611）  <br>ansible<span class="hljs-built_in">_</span>architecture                    体系（x86<span class="hljs-built_in">_</span>64）  <br>ansible<span class="hljs-built_in">_</span>kernel                          操作系统内核版本号  <br>ansible<span class="hljs-built_in">_</span>userspace<span class="hljs-built_in">_</span>architecture          用户模式体系（x86<span class="hljs-built_in">_</span>64）  <br>ansible<span class="hljs-built_in">_</span>userspace<span class="hljs-built_in">_</span>bits                  用户模式位数  <br>ansible<span class="hljs-built_in">_</span>pkg<span class="hljs-built_in">_</span>mgr                         软件包管理器  <br>ansible<span class="hljs-built_in">_</span>selinux.status                  selinux状态  <br>ansible<span class="hljs-built_in">_</span>processor                       CPU产品名称  <br>ansible<span class="hljs-built_in">_</span>processor<span class="hljs-built_in">_</span>count                 CPU数量  <br>ansible<span class="hljs-built_in">_</span>processor<span class="hljs-built_in">_</span>cores                 单颗CPU核心数量  <br>ansible<span class="hljs-built_in">_</span>processor<span class="hljs-built_in">_</span>threads<span class="hljs-built_in">_</span>per<span class="hljs-built_in">_</span>core      每个核心线程数量  <br>ansible<span class="hljs-built_in">_</span>processor<span class="hljs-built_in">_</span>vcpus                 CPU核心总数  <br>ansible<span class="hljs-built_in">_</span>memtotal<span class="hljs-built_in">_</span>mb                     内存空间  <br>ansible<span class="hljs-built_in">_</span>swaptotal<span class="hljs-built_in">_</span>mb                    交换空间  <br>ansible<span class="hljs-built_in">_</span>fqdn                            主机的域名  <br>ansible<span class="hljs-built_in">_</span>default<span class="hljs-built_in">_</span>ipv4.interface          默认网卡  <br>ansible<span class="hljs-built_in">_</span>default<span class="hljs-built_in">_</span>ipv4.address            默认IP地址  <br>ansible<span class="hljs-built_in">_</span>default<span class="hljs-built_in">_</span>ipv4.gateway            默认网关  <br>ansible<span class="hljs-built_in">_</span>devices                         硬盘设备名  <br>ansible<span class="hljs-built_in">_</span>devices.vendor                  硬盘供应商  <br>ansible<span class="hljs-built_in">_</span>devices.model                   硬盘整列卡型号  <br>ansible<span class="hljs-built_in">_</span>devices.host                    硬盘整列卡控制器  <br>ansible<span class="hljs-built_in">_</span>devices.size                    设备存储空间  <br>ansible<span class="hljs-built_in">_</span>interfaces                      网卡  <br>ansible<span class="hljs-built_in">_</span>&#123;interfaces&#125;.ipv4.address       网卡IP地址  <br>ansible<span class="hljs-built_in">_</span>&#123;interfaces&#125;.ipv6.0.address     网卡IPv6地址  <br>ansible<span class="hljs-built_in">_</span>&#123;interfaces&#125;.macaddress         网卡mac地址  <br></code></pre></td></tr></table></figure><hr><h2 id="Ansible-Palybook"><a href="#Ansible-Palybook" class="headerlink" title="Ansible Palybook"></a>Ansible Palybook</h2><h3 id="变量引用-vars"><a href="#变量引用-vars" class="headerlink" title="变量引用 vars"></a>变量引用 vars</h3><p><strong>定义变量文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">package_name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">env_name:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><p><strong>palybook</strong></p><ul><li>register 用于接收</li><li>debug  用于输出</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-number">123.57</span><span class="hljs-number">.71</span><span class="hljs-number">.226</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br><br>  <span class="hljs-comment"># vars:</span><br>    <span class="hljs-comment"># - package_name: nginx</span><br>    <span class="hljs-comment"># - env_name: prod</span><br>  <span class="hljs-attr">vars_files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vars.yaml</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; env_name &#125;&#125;</span> install <span class="hljs-template-variable">&#123;&#123; package_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> &#123;&#123; <span class="hljs-string">package_name</span>  &#125;&#125;<br>      <span class="hljs-attr">register:</span> <span class="hljs-string">print_package_name</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;输出<span class="hljs-template-variable">&#123;&#123; print_package_name &#125;&#125;</span>信息&quot;</span><br>      <span class="hljs-attr">debug:</span> <span class="hljs-string">var=print_package_name.stdout</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; inventory_hostname  &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> &#123;&#123; <span class="hljs-string">inventory_hostname</span>   &#125;&#125;<br>      <span class="hljs-attr">register:</span> <span class="hljs-string">print_inventory_hostname</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;输出<span class="hljs-template-variable">&#123;&#123; inventory_hostname &#125;&#125;</span>信息&quot;</span><br>      <span class="hljs-attr">debug:</span> <span class="hljs-string">var=print_inventory_hostname.stdout</span><br></code></pre></td></tr></table></figure><hr><h3 id="服务安装-yum"><a href="#服务安装-yum" class="headerlink" title="服务安装 yum"></a>服务安装 yum</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible-playbook yum.yaml -C --limit 172.17.0.4,172.17.0.5<br>过程... 结果<br>172.17.0.4                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>172.17.0.5                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 <br></code></pre></td></tr></table></figure><ul><li>-C 检查脚本运行情况，不在服务器执行</li><li>–limit 指定节点机器运行 –limit 172.17.0.4,172.17.0.5</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">containers</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pak_name:</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">env_name:</span> <span class="hljs-string">prod</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; env_name&#125;&#125;</span> install <span class="hljs-template-variable">&#123;&#123; pak_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">yum:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; pak_name &#125;&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="二进制服务安装Nginx-例子"><a href="#二进制服务安装Nginx-例子" class="headerlink" title="二进制服务安装Nginx(例子)"></a>二进制服务安装Nginx(例子)</h3><p><strong>目录结构</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tree</span><br><span class="hljs-string">.</span><br><span class="hljs-string">├──</span> <span class="hljs-string">index.html.j2</span>    <span class="hljs-comment"># nginx首页文件</span><br><span class="hljs-string">└──</span> <span class="hljs-string">install_nginx.yaml</span> <span class="hljs-comment"># 安装nginx的playbook</span><br></code></pre></td></tr></table></figure><p><strong>index.html.j2 文件内容</strong></p><ul><li>inventory_hostname 获取主机ipv4地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;h1&gt; &#123;&#123; inventory_hostname  &#125;&#125; &lt;/h1&gt;<br><br></code></pre></td></tr></table></figure><p><strong>安装Nginx剧本</strong></p><ul><li>可以通过 -t  tag 来进行配置文件检测、拷贝首页、 并触发重启动作。</li></ul><p><code>ansible-playbook -t html,check  install_nginx.yaml</code>   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">containers</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-comment"># 默认采集主机的信息，不采集执行会快一点</span><br>  <span class="hljs-attr">gather_facts:</span> <span class="hljs-literal">False</span><br>  <br>  <span class="hljs-comment"># 变量</span><br>  <span class="hljs-attr">vars:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_user:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_group:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_version:</span> <span class="hljs-number">1.18</span><span class="hljs-number">.0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_tmp_dir:</span> <span class="hljs-string">/opt</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_listen_port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">nginx_prefix_dir:</span> <span class="hljs-string">/usr/local/nginx</span><br>  <span class="hljs-comment"># 任务列表</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-comment"># 安装nginx依赖包</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;install nginx rely packages&quot;</span><br>      <span class="hljs-attr">yum:</span><br>        <span class="hljs-attr">name:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">net-tools</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">pcre</span> <br>          <span class="hljs-bullet">-</span> <span class="hljs-string">pcre-devel</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">openssl</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">openssl-devel</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">zlib-devel</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">gcc</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span><br>    <br>    <span class="hljs-comment"># 新建用户 </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Add nginx group&quot;</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">nginx_user</span>  <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">system=yes</span><br>   <br>    <span class="hljs-comment"># 新增组 并关联用户</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Add nginx user&quot;</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">nginx_user</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">shell=/sbin/nologin</span> <span class="hljs-string">system=yes</span> <span class="hljs-string">group=&#123;&#123;</span> <span class="hljs-string">nginx_group</span> <span class="hljs-string">&#125;&#125;</span><br>    <br>    <span class="hljs-comment"># 下载nginx二进制包保存到 /opt</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Download nginx package&quot;</span> <br>      <span class="hljs-attr">get_url:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://nginx.org/download/nginx-&#123;&#123;</span> <span class="hljs-string">nginx_version</span> <span class="hljs-string">&#125;&#125;.tar.gz</span><br>        <span class="hljs-attr">dest:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; nginx_tmp_dir &#125;&#125;</span>/nginx-<span class="hljs-template-variable">&#123;&#123; nginx_version &#125;&#125;</span>.tar.gz&quot;</span><br><br>    <span class="hljs-comment"># 获取nginx的文件是否存在、以决定是否编译nginx</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;nginx exists&quot;</span><br>      <span class="hljs-attr">stat:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; nginx_prefix_dir &#125;&#125;</span>/sbin/nginx&quot;</span><br>      <span class="hljs-attr">register:</span> <span class="hljs-string">file_status</span><br>   <br>    <span class="hljs-comment"># 安装nginx  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;install nginx&quot;</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;cd <span class="hljs-template-variable">&#123;&#123; nginx_tmp_dir &#125;&#125;</span>;tar -xf nginx-<span class="hljs-template-variable">&#123;&#123; nginx_version &#125;&#125;</span>.tar.gz;cd nginx-<span class="hljs-template-variable">&#123;&#123; nginx_version &#125;&#125;</span>;./configure --user=<span class="hljs-template-variable">&#123;&#123; nginx_user &#125;&#125;</span> --group=<span class="hljs-template-variable">&#123;&#123; nginx_group &#125;&#125;</span> --prefix=<span class="hljs-template-variable">&#123;&#123; nginx_prefix_dir &#125;&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-pcre --with-http_realip_module;make&amp;&amp; make install&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">file_status.stat.exists</span> <span class="hljs-string">==</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 检查nginx的端口 并接收 shell返回的结果</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;check nginx status&quot;</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">netstat</span> <span class="hljs-string">-anpt</span> <span class="hljs-string">|grep</span> &#123;&#123; <span class="hljs-string">nginx_listen_port</span> &#125;&#125;  <span class="hljs-string">|grep</span> <span class="hljs-string">LISTEN</span>  <span class="hljs-string">|wc</span> <span class="hljs-string">-l</span><br>      <span class="hljs-attr">register:</span> <span class="hljs-string">port_result</span><br><br>    <span class="hljs-comment"># 检查nginx配置文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">check</span> <span class="hljs-string">config</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; nginx_prefix_dir  &#125;&#125;</span>/sbin/nginx -t &quot;</span><br>      <span class="hljs-attr">register:</span> <span class="hljs-string">status_result</span><br>      <span class="hljs-attr">tags:</span> <span class="hljs-string">check</span><br><br>    <span class="hljs-comment"># 当接收的结果 == 0，此时80端口没有被占用， 启动nginx  否则直接跳过</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">startd</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; nginx_prefix_dir  &#125;&#125;</span>/sbin/nginx&quot;</span><br>      <span class="hljs-comment"># 这里返回的是字符串, 后面需要加双引号</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">port_result.stdout</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;0&quot;</span><br><br><br>    <span class="hljs-comment"># 拷贝本地j2文件模板到远程主机并触发nginx reload</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Copy html file&quot;</span><br>      <span class="hljs-attr">template:</span> <span class="hljs-string">src=index.html.j2</span> <span class="hljs-string">dest=&#123;&#123;</span> <span class="hljs-string">nginx_prefix_dir</span> <span class="hljs-string">&#125;&#125;/html/index.html</span><br>      <span class="hljs-attr">notify:</span> <span class="hljs-string">reload</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-comment"># 为任务设置tag 可以通过tag执行单个任务</span><br>      <span class="hljs-comment"># ansible-playbook -t html install_nginx.yaml</span><br>      <span class="hljs-attr">tags:</span> <span class="hljs-string">html</span> <br><br>  <span class="hljs-comment"># 触发器 任务中通过 notify 进行调用</span><br>  <span class="hljs-attr">handlers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">reload</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; nginx_prefix_dir &#125;&#125;</span>/sbin/nginx -s reload&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">status_result.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><hr><h2 id="Roles-角色"><a href="#Roles-角色" class="headerlink" title="Roles 角色"></a>Roles 角色</h2><p><strong>roles角色结构如下</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/791267/1722493277797-830dbe15-52ae-45e1-92c6-68ab18e1bcfc.png"></p><p><strong>roles目录结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">playbook.yml<br>roles/<br> project/<br>   tasks/<br>   files/<br>   vars/       <br>   templates/<br>   handlers/<br>   default/    <br>   meta/  <br></code></pre></td></tr></table></figure><ul><li>files&#x2F; ：存放由copy或script模块等调用的文件</li><li>templates&#x2F;：template模块查找所需要模板文件的目录</li><li>tasks&#x2F;：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</li><li>handlers&#x2F;：至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</li><li>vars&#x2F;：定义变量，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</li><li>meta&#x2F;：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含</li><li>default&#x2F;：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低</li></ul><hr><h3 id="二进制服务安装Docker-例子"><a href="#二进制服务安装Docker-例子" class="headerlink" title="二进制服务安装Docker(例子)"></a>二进制服务安装Docker(例子)</h3><p><strong>目录结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── install_docker.yaml<br>└── roles<br>    └── docker<br>        ├── file<br>        │   ├── daemon.json<br>        │   └── docker.service<br>        ├── tasks<br>        │   ├── copybin.yaml<br>        │   ├── copyconfig.yaml<br>        │   ├── createdir.yaml<br>        │   ├── download.yaml<br>        │   ├── main.yaml<br>        │   └── service.yaml<br>        └── vars<br>            └── main.yaml<br></code></pre></td></tr></table></figure><p><strong>playbook调用角色</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat install_docker.yaml <br>- hosts: localhost<br>  remote_user: root<br>  roles:<br>  - docker<br></code></pre></td></tr></table></figure><p><strong>file目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell">more roles/docker/file/*<br>::::::::::::::<br>roles/docker/file/daemon.json<br>::::::::::::::<br>&#123;<br>    &quot;registry-mirrors&quot;:[<br>        &quot;https://kfwkfulq.mirror.aliyuncs.com&quot;,<br>        &quot;https://2lqq34jg.mirror.aliyuncs.com&quot;,<br>        &quot;https://pee6w651.mirror.aliyuncs.com&quot;,<br>        &quot;http://hub-mirror.c.163.com&quot;,<br>        &quot;https://docker.mirrors.ustc.edu.cn&quot;,<br>        &quot;https://registry.docker-cn.com&quot;<br>    ]<br>&#125;<br>::::::::::::::<br>roles/docker/file/docker.service<br>::::::::::::::<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/dockerd                         --graph /home/docker<br>ExecReload=/bin/kill -s HUP <br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br>TimeoutStartSec=0<br>Delegate=yes<br>KillMode=process<br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>tasks目录</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">more</span> <span class="hljs-string">roles/docker/tasks/*</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/main.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">download.yaml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">copybin.yaml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">createdir.yaml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">copyconfig.yaml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">service.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/copybin.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">bin</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=&quot;&#123;&#123;</span> <span class="hljs-string">docker_tmp_dir</span> <span class="hljs-string">&#125;&#125;/docker/&#123;&#123;</span> <span class="hljs-string">item</span> <span class="hljs-string">&#125;&#125;&quot;</span> <span class="hljs-string">dest=&quot;/usr/bin/&#123;&#123;</span> <span class="hljs-string">item</span> <span class="hljs-string">&#125;&#125;&quot;</span> <span class="hljs-string">remote_src=yes</span> <span class="hljs-string">mode=0755</span><br>  <span class="hljs-attr">with_items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">containerd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">containerd-shim</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ctr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">dockerd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker-init</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker-proxy</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">runc</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/copyconfig.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">system</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=&quot;file/docker.service&quot;</span> <span class="hljs-string">dest=&quot;/usr/lib/systemd/system/docker.service&quot;</span><br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">config</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=&quot;file/daemon.json&quot;</span> <span class="hljs-string">dest=&quot;/etc/docker/daemon.json&quot;</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/createdir.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">create</span> <span class="hljs-string">directory</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">path=&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class="hljs-string">state=directory</span><br>  <span class="hljs-attr">with_items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/home/docker</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/docker</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/systemd/system/docker.service.d/</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/download.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Download docker package&quot;</span><br>  <span class="hljs-attr">get_url:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://download.docker.com/linux/static/stable/x86_64/docker-&#123;&#123;</span> <span class="hljs-string">docker_version&#125;&#125;.tgz</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_tmp_dir &#125;&#125;</span>/docker-<span class="hljs-template-variable">&#123;&#123;docker_version&#125;&#125;</span>.tgz&quot;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">open</span> <span class="hljs-string">tgz</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;cd <span class="hljs-template-variable">&#123;&#123; docker_tmp_dir  &#125;&#125;</span> ; tar xf docker-<span class="hljs-template-variable">&#123;&#123;docker_version&#125;&#125;</span>.tgz &quot;</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-string">roles/docker/tasks/service.yaml</span><br><span class="hljs-string">::::::::::::::</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span>  <span class="hljs-string">docker</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">docker</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">enable</span> <span class="hljs-string">docker</span> <span class="hljs-string">service</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">docker</span><br></code></pre></td></tr></table></figure><p><strong>vars目录</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">more</span> <span class="hljs-string">roles/docker/vars/*</span><br><span class="hljs-attr">docker_version:</span> <span class="hljs-string">&quot;19.03.9&quot;</span><br><span class="hljs-attr">docker_tmp_dir:</span> <span class="hljs-string">&quot;/opt&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
